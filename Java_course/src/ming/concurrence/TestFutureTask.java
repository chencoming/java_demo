package ming.concurrence;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;

/**
 * 
 * @author coming 2016-7-21
 */
public class TestFutureTask {
	
	public static void main(String[] args) {
		// 第一种方式
/*		ExecutorService executor = Executors.newCachedThreadPool();
		Task task = new Task();
		FutureTask<Integer> futureTask = new FutureTask<Integer>(task);
		executor.submit(futureTask);
		executor.shutdown();*/

		// 第二种方式，注意这种方式和第一种方式效果是类似的，
		//只不过一个使用的是ExecutorService，一个使用的是Thread
		Task task = new Task();
		FutureTask<Integer> futureTask = new FutureTask<Integer>(task);
		Thread thread = new Thread(futureTask);
		thread.start();
		 

		try {
			Thread.sleep(1000);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}

		System.out.println("主线程在执行任务");

		try {
			System.out.println("task运行结果" + futureTask.get());
		} catch (Exception e) {
			e.printStackTrace();
		}

		System.out.println("所有任务执行完毕");
	}
}

